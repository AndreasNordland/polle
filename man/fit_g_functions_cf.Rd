% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/g_function.R
\name{fit_g_functions_cf}
\alias{fit_g_functions_cf}
\title{Cross-fit g-functions}
\usage{
fit_g_functions_cf(
  folds,
  policy_data,
  g_models,
  full_history,
  future_args = list(future.seed = TRUE)
)
}
\arguments{
\item{folds}{List of vectors of indices for each validation fold, see examples.}

\item{policy_data}{Policy data object created by \code{\link[=policy_data]{policy_data()}}.}

\item{g_models}{Propensity models/g-models created by \code{\link[=g_glm]{g_glm()}}, \code{\link[=g_rf]{g_rf()}}, \code{\link[=g_sl]{g_sl()}} or similar functions.}

\item{full_history}{If TRUE, the full history is used to fit each g-model. If FALSE, the single stage/"Markov type" history is used to fit each g-model.}

\item{future_args}{arguments passed to \link[future.apply:future_lapply]{future.apply::future_lapply}.}
}
\description{
\code{fit_g_functions_cf} is used to cross-fit a list of g-models
}
\examples{
#' library("polle")
### Simulating two-stage policy data
source(system.file("sim", "two_stage.R", package="polle"))
par0 <- c(gamma = 0.5, beta = 1)
d <- sim_two_stage(2e3, seed=1, par=par0)
pd <- policy_data(d,
                  action = c("A_1", "A_2"),
                  covariates = list(L = c("L_1", "L_2"),
                                    C = c("C_1", "C_2")),
                  utility = c("U_1", "U_2", "U_3"))
pd

# creating 2 folds (indices for each validation fold)
folds <- split(sample(1:get_n(pd), get_n(pd)), rep(1:2, length.out = get_n(pd)))

# fitting a single g-model across all stages for each fold:
g_functions <- fit_g_functions_cf(folds = folds,
                                  policy_data = pd,
                                  g_models = g_glm(),
                                  full_history = FALSE)
g_functions
# fitting a g-model for each stage for each fold (in parallel):
future::plan("multisession")
g_functions <- fit_g_functions_cf(folds = folds,
                                  policy_data = pd,
                                  g_models = list(g_glm(), g_glm()),
                                  full_history = TRUE)
future::plan("sequential")
g_functions$functions
}
