% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/policy_learn.R
\name{get_policy_functions}
\alias{get_policy_functions}
\title{Get Policy Functions}
\usage{
get_policy_functions(object, stage)
}
\arguments{
\item{object}{Object of class "policy_object", see \link{policy_learn}.}

\item{stage}{Integer. Stage number.}
}
\value{
Functions with arguments:
\item{\code{H}}{\link{data.table}}
}
\description{
\code{get_policy_functions()}
}
\examples{
library("polle")
### Two stages:
source(system.file("sim", "two_stage.R", package="polle"))
d <- sim_two_stage(2e3, seed=1)
pd <- policy_data(d,
                  action = c("A_1", "A_2"),
                  covariates = list(L = c("L_1", "L_2"),
                                    C = c("C_1", "C_2")),
                  utility = c("U_1", "U_2", "U_3"))
pd

### V-restricted (Doubly Robust) Q-learning
# specifying the learner:
pl <- policy_learn(type = "rqvl",
                   qv_models = q_glm(formula = ~ C))
# applying the learner:
po <- pl(policy_data = pd,
         q_models = q_glm(),
         g_models = g_glm())
po

# getting the policy function at stage 2:
pf2 <- get_policy_functions(po, stage = 2)
args(pf2)

# applying the policy function to new data:
set.seed(1)
d2 <- pf2(H = data.table(C = rnorm(n = 10)))
d2

# comparing get_policy_functions() and get_policy():
all.equal(
 pf2(H = get_history(pd, stage = 2)$H),
 get_policy(po)(pd)[stage == 2]$d
)
rm(pl, po, d2)

### Realistic V-restricted Policy Tree Learning
# specifying the learner:
pl <- policy_learn(type = "ptl",
                   policy_vars = c("C", "L"),
                   alpha = 0.05)

# applying the learner:
po <- pl(policy_data = pd,
         q_models = q_glm(),
         g_models = g_glm())

#' # getting the policy function at stage 2:
pf2 <- get_policy_functions(po, stage = 2)
args(pf2)

# applying the policy function to new data:
set.seed(1)
new_H <- data.table(L = rnorm(n = 10),
                    C = rnorm(n = 10))
d2 <- pf2(H = new_H, g_H = new_H)
d2

# comparing get_policy_functions() and get_policy():
all.equal(
 pf2(H = get_history(pd, stage = 2)$H, g_H = get_history(pd, stage = 2)$H),
 get_policy(po)(pd)[stage == 2]$d
)
}
