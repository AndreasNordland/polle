% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Q_function.R
\name{fit_Q_functions}
\alias{fit_Q_functions}
\title{Fit Q-functions}
\usage{
fit_Q_functions(policy_data, policy_actions, q_models, full_history = FALSE)
}
\arguments{
\item{policy_data}{Policy data object created by \code{\link[=policy_data]{policy_data()}}.}

\item{policy_actions}{Policy actions, see \link{policy_def}.}

\item{q_models}{Outcome regression models/Q-models created by \code{\link[=q_glm]{q_glm()}}, \code{\link[=q_rf]{q_rf()}}, \code{\link[=q_sl]{q_sl()}} or similar functions.}

\item{full_history}{If TRUE, the full history is used to fit each Q-model. If FALSE, the single stage/"Markov type" history is used to fit each Q-model.}
}
\description{
\code{fit_Q_functions} is used to fit a list of Q-models
}
\examples{
library("polle")
### Simulating two-stage policy data
source(system.file("sim", "two_stage.R", package="polle"))
par0 <- c(gamma = 0.5, beta = 1)
d <- sim_two_stage(2e3, seed=1, par=par0)
pd <- policy_data(d,
                  action = c("A_1", "A_2"),
                  covariates = list(L = c("L_1", "L_2"),
                                    C = c("C_1", "C_2")),
                  utility = c("U_1", "U_2", "U_3"))
pd

# Defining a static policy
pl <- policy_def(static_policy(1), reuse = TRUE)

# fitting a Q-model for each stage:
q_functions <- fit_Q_functions(policy_data = pd,
                               policy_actions = pl(pd),
                               q_models = list(q_glm(), q_glm()),
                               full_history = TRUE)
q_functions
}
